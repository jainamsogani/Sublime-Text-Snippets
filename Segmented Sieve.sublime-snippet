<snippet>
	<content><![CDATA[
vll primes;
void sieveOfEratosthenes(ll n)
{
    bool a[n + 1];
    fill(a, n + 1, 1);
    a[0] = a[1] = 0;

    for (ll i = 2 ; i <= n ; i++)
    {
        if (a[i] == 1)
        {
            for (ll j = i * i ; j <= n ; j += i)
                a[j] = 0;

            primes.push_back(i);
        }
    }
}

//returns a vector which has primes between m and n (inclusive) ; m<=n
vll segmentedSieve(ll m, ll n)
{
    if (m == 1)
        m++;

    vll ans;
    ll p[n - m + 1];
    fill(p, n - m + 1, 1);

    for (ll i : primes)
    {
        if (i * i > n)
            break;

        ll j = (m / i) * i;

        if (j < m)
            j += i;

        for ( ; j <= n ; j += i)
        {
            if (j != i)
                p[j - m] = 0;
        }
    }

    f(i, 0, n - m + 1)
    if (p[i] == 1)
        ans.pb(m + i);

    return ans;
}

/*implement this in main function
sieveOfEratosthenes(sqrt(r+0.1))*/
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segmentedSieve</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>

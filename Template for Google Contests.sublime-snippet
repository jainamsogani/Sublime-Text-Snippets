<snippet>
	<content><![CDATA[
#include<bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
#define ff              first
#define ss              second
#define ld              long double
#define ll              long long int
#define pb              push_back
#define ppb             pop_back
#define mod             1000000007
#define vll             vector<ll>
#define pll             pair<ll, ll>
#define uom             unordered_map
#define uos             unordered_set
#define mxh             priority_queue<ll>
#define ull             unsigned long long
#define INF             9223372036854775807
#define mnh             priority_queue<ll, vector<ll>, greater<ll>>
#define set1            __builtin_popcountll
#define endl            "\n"
#define w(t)            ll tests;    cin>>tests;        while(tests--)
#define all(x)          x.begin(), x.end()
#define setp(x, y)      fixed << setprecision(x) << y
#define f(i, a, b)      for(ll i = a ; i < b ; i++)
#define fo(j, a, b)     for(ll j = a ; j >= b ; j--)
#define fill(a, n, x)   f(i, 0, n)     a[i]=x;
typedef tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update> oset;
// oset.find_by_order(idx) --> returns the iterator at index idx
// oset.order_of_key(k) --> returns the number of elements smaller than k

void init() {
#ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
}

ll power(ll a, ll b) {ll res = 1; while (b > 0) {if (b & 1)res = res * a; a = a * a; b >>= 1;} return res;}
ll expo(ll a, ll b, ll m) {ll res = 1; while (b > 0) {if (b & 1)res = (res * a) % m; a = (a * a) % m; b = b >> 1;} return res;}
ll mminvprime(ll a, ll b) {return expo(a, b - 2, b);}
ll mod_add(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a + b) % m) + m) % m;}
ll mod_mul(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a * b) % m) + m) % m;}
ll mod_sub(ll a, ll b, ll m) {a = a % m; b = b % m; return (((a - b) % m) + m) % m;}
ll mod_div(ll a, ll b, ll m) {a = a % m; b = b % m; return (mod_mul(a, mminvprime(b, m), m) + m) % m;}
ll dx[] = {0, 1, 0, -1, -1, 1, -1, 1};
ll dy[] = {1, 0, -1, 0, -1, 1, 1, -1};

int main() {

    init();
    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);

    ll testcases;
    cin >> testcases;

    for (ll tests = 1 ; tests <= testcases ; tests++)
    {
        

        cout << "Case #" << tests << ": " << ans << endl;
    }

    return 0;
}
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>google</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
